### 代码格式化压缩成一行教程
npm install uglify-js -g
uglifyjs xx.js -o xx.min.js

##配置webstorm
where uglifyjs 得到路径比如:
C:\Users\dashen\AppData\Roaming\npm\uglifyjs.cmd
$FileName$ -o $FileNameWithoutExtension$.min.js
$FileDir$

### 模板规则说明
#所有相关属性说明:
var rule = {
    类型:'影视',//影视|听书|漫画|小说
    title:'',//规则标题,没有实际作用,但是可以作为cms类名称依据
    编码:'',//不填就默认utf-8
    搜索编码:'',//不填则不编码，默认都是按utf-8.可优先于全局编码属性.比如网页源码编码是gbk,这里可以指定utf-8搜索独立编码。多数情况这个属性不填或者填写gbk应对特殊的网站搜索
    host:'',//网页的域名根,包含http头如 https://www,baidu.com
    hostJs:'print(HOST);let html=request(HOST,{headers:{"User-Agent":PC_UA}});let src = jsp.pdfh(html,"ul&&li&&a&&href");print(src);HOST=src.replace("/index.php","")',//网页域名根动态抓取js代码。通过HOST=赋值
    homeUrl:'/latest/',//网站的首页链接,可以是完整路径或者相对路径,用于分类获取和推荐获取 fyclass是分类标签 fypage是页数
    url:'/fyclass/fypage.html[/fyclass/]',//网站的分类页面链接
    detailUrl:'https://yanetflix.com/voddetail/fyid.html',//非必填,二级详情拼接链接,感觉没啥卵用
    searchUrl:'',//搜索链接 可以是完整路径或者相对路径,用于分类获取和推荐获取 **代表搜索词 fypage代表页数
    searchable:0,//是否启用全局搜索,
    quickSearch:0,//是否启用快速搜索,
    search_match: true, //精准搜索
    filterable:0,//是否启用筛选,
    filter:{},// 筛选条件字典
    // 默认筛选条件字典(不同分类可以指定同样筛选参数的不同默认值)
    filter_def:{
        douyu:{
        area:'一起看',
        other:'..'
        },
        huya:{
        area:'影音馆',
        other:'..'
        }
    }, 
    filter获取方法: '',
    // 筛选网站传参,会自动传到分类链接下(本示例中的url参数)-url里参数为fyfilter,可参考蓝莓影视.js
    filter_url:'style={{fl.style}}&zone={{fl.zone}}&year={{fl.year}}&fee={{fl.fee}}&order={{fl.order}}',
    // 注意,由于猫有配置缓存,搜索配置没法热加载，修改了js不需要重启服务器
    // 但是需要tv_box进设置里换源使配置重新装载
    headers:{//网站的请求头,完整支持所有的,常带ua和cookies
        'User-Agent':'MOBILE_UA',
        "Cookie": "searchneed=ok"
    },
    timeout:5000,//网站的全局请求超时,默认是3000毫秒
    class_name:'电影&电视剧&动漫&综艺',//静态分类名称拼接
    class_url:'1&2&3&4',//静态分类标识拼接
    //动态分类获取 列表;标题;链接;正则提取 不需要正则的时候后面别加分号
    class_parse:'#side-menu:lt(1) li;a&&Text;a&&href;com/(.*?)/',
    // 除开全局过滤之外还需要过滤哪些标题不视为分类
    cate_exclude:'',
    // 除开全局动态线路名过滤之外还需要过滤哪些线路名标题不视为线路
    tab_exclude:'',
    //移除某个线路及相关的选集|js1
    tab_remove:['tkm3u8'],
    //线路顺序,按里面的顺序优先，没写的依次排后面|js1
    tab_order:['lzm3u8','wjm3u8','1080zyk','zuidam3u8','snm3u8'],
    //线路名替换如:lzm3u8替换为量子资源|js1
    tab_rename:{'lzm3u8':'量子','1080zyk':'1080看','zuidam3u8':'最大资源','kuaikan':'快看',
    'bfzym3u8':'暴风','ffm3u8':'非凡','snm3u8':'索尼','tpm3u8':'淘片','tkm3u8':'天空',},

    // 服务器解析播放
    play_parse:true,
    // play_json　传数组或者　类　true/false 比如 0,1 如果不传会内部默认处理 不传和传0可能效果不同
    // 效果等同说明: play_json:[{re:'*', json:{jx:0, parse:1}}], 等同于 play_json:0,
    play_json:[{
        re:'*',
        json:{
            jx:1,
            parse:1,
        },
    }],
    //控制不同分类栏目下的总页面,不填就是默认999.哔哩影视大部分分类无法翻页，都需要指定页数为 1
    pagecount:{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"时间表":1},
    // 自定义免嗅 
    lazy:'',
    // 首页推荐显示数量
    limit:6,
    double:true,//是否双层列表定位,默认false
    // 对图片加了referer验证的有效,海阔专用,普通规则请勿填写此键值
    图片来源:'@Referer=http://www.jianpianapp.com@User-Agent=jianpian-version350',
    // 替换所有图片链接 欲替换文本=>替换为文本
    图片替换:'https://www.keke6.app/=>https://vres.a357899.cn/',
    
    // js写法，仅js模式1有效.可以用于代码动态获取全局cookie之类的
    // 可操作变量有 rule_fetch_params,rule,以及基础的网页访问request,post等操作
    预处理:'rule_fetch_params.headers.Cookie = "xxxx";',
    // 类似海阔一级 列表;标题;图片;描述;链接;详情 其中最后一个参数选填
    // 如果是双层定位的话,推荐的第2段分号代码也是第2层定位列表代码
    推荐:'.col-sm-6;h3&&Text;img&&data-src;.date&&Text;a&&href',
    // 类似海阔一级 列表;标题;图片;描述;链接;详情 其中最后一个参数选填
    一级:'.col-sm-6;h3&&Text;img&&data-src;.date&&Text;a&&href',
    //二级发起访问前进行js处理。解决特殊情况一级给出的链接非二级真实源码而是前端重定向链接的源码
    二级访问前:'log(MY_URL);let jump=request(MY_URL).match(/href="(.*?)"/)[1];log(jump);MY_URL=urljoin2(MY_URL,jump)',
    // 二级可以是*,表示规则无二级,直接拿一级的链接进行嗅探
    // 二级 title: 片名;类型
    // 二级 desc: 主要信息;年代;地区;演员;导演
    // 或者 {title:'',img:'',desc:'',content:'',tabs:'',lists:'',tab_text:'body&&Text',list_text:'body&&Text',list_url:'a&&href'} 同海阔dr二级
    // 二级tabs: '', //线路数组
    // 二级lists: '', //集数组
    // 二级tab_text: '', //线路名
    // 二级list_text: '', //集名
    // 二级list_url: '' ,//集链接
    //二级list_url_prefix:'',//链接处理
    二级:'*',//'*',没有二级直接嗅探播放详情页地址  
    // 搜索可以是*,集成一级，或者跟一级一样的写法 列表;标题;图片;描述;链接;详情
    搜索:'*',
    // 本地代理规则，可用于修改m3u8文件文本去广告后返回代理文件地址，也可以代理加密图片
    proxy_rule:`js:
    log(input);
    input = [200,'text;plain','hello drpy']
    `,
    //是否启用辅助嗅探: 1,0
    sniffer:1,
    // 辅助嗅探规则
    isVideo:"http((?!http).){26,}\\.(m3u8|mp4|flv|avi|mkv|wmv|mpg|mpeg|mov|ts|3gp|rm|rmvb|asf|m4a|mp3|wma)",
    // 辅助嗅探规则js写法
    isVideo:`js:
    log(input);
    if(/m3u8/.test(input)){
    input = true
    }else{
    input = false
    }
    `,
}

##模板继承写法:
var rule = Object.assign(muban.mxpro,{
title:'鸭奈飞',
host:'https://yanetflix.com',
url:'/index.php/vod/show/id/fyclass/page/fypage.html',
class_parse:`.navbar-items li:gt(1):lt(6);a&&Text;a&&href;.*/(.*?).html`,
});

##模板继承写法(新):
var rule = {
title:'cokemv',
模板:'mxpro',
host:'https://cokemv.me',
class_parse:`.navbar-items li:gt(1):lt(7);a&&Text;a&&href;/(\\d+).html`,
}

##模板继承写法(自动匹配)
#注意事项:自动匹配只支持能从HOST获取分类的cms模板站,采集1，短视2等api的模板无法匹配
var rule = {
    模板: '自动',
    模板修改: $js.toString(() => {
        Object.assign(muban.自动.二级, {
            tab_text: 'div--small&&Text',
        });
    }),
    title: '剧圈圈[自动]',
    host: 'https://www.jqqzx.cc/',
    url: '/vodshow/id/fyclass/page/fypage.html',
    searchUrl: '/vodsearch**/page/fypage.html',
    class_parse: '.navbar-items li:gt(2):lt(8);a&&Text;a&&href;.*/(.*?)\.html',
    cate_exclude: '今日更新|热榜',
}

#filter一键爬取和入库(filter_name,filter_url,filter_parse)

##源正则写法说明:  
属性class_parse按;分隔后取[3]为分类的正则字符串。  
这里的正则跟js的/.*/这种写法相比，由于是字符串,需要实现字符串标准。
比如想实现 /(\d+)/ 那么字符串写法为 (\\d+)  
原理是 new RegExp('(\\d+)') = /(\d+)/

支持js:的属性如果写法用$js.toString(()=>{}),则内部代码不存在正则转义问题。  
每个源的属性对应的值如果是字符串,可以用反引号``包含起来。
避免内部出现单双引号混用等需\转义问题


##js:内置变量
input,html,VODS,VOD,TABS,LISTS,MY_CATE,MY_FL
getProxyUrl(获取壳子本地代理地址返回 /proxy?do=js的完整链接)

##本地代理说明:
proxy_rule参数input赋值格式为三元素列表[status,content-type,data]  
如: [200,'text/plain','hello drpy']  
input = [200,'application/vnd.apple.mpegurl',m3u8]    
 [200, "video/MP2T", action, ""]
##rsa加解密说明:
RSA.encode(data, key, option);
RSA.decode(data, key, option);

### 其它类型源说明:  
默认drpy源都是为早期的tvbox而生的,因此只支持影视类型的源(听书也当影视用)。  
现在已三端支持,拥抱海阔视界和zyplayer生态。  
从2024年6月4日起，道长决定让drpy源写法放飞自我，支持更多源类型，不再局限于影视。  
实验特性:支持 类型:'影视',//影视|听书|漫画|小说  
影视和听书用法一致不需要调整。
漫画需要在选集播放lazy处理后的url里返回 pics:// 协议，用法同海阔。参考源【第一韩漫】  
小说需要在选集播放lazy处理后的url里返回 novel:// 协议，内容为json文本。如 novel://{"title":"章节名称","content":"章节内容"}
##
###2024.11.4
增加drpy新特性，可以规则内添加搜索验证标识，可以禁止某个源的搜索翻页。

##多域名基础随机切换方案示例（50%概率）
// 单行极简写法（二选一）
host: `https://www.${Math.random() < 0.5 ? 'subaibaiys' : 'subaibai'}.com`,

// 或扩展多域名版本（三选一）
host: `https://${
  Math.random() < 0.33 ? 'www.subaibai.com' : 
  Math.random() < 0.66 ? 'www.subaibaiys.com' : 'subaibai.vip'
}`,

##多域名扩展写法示例3：
host: (function() {
    const domains = [
      'lkvod.com',
      'lkvod.me',
      'www.nkvod.com'
    ];    
    let retry = 0;
    while (retry++ < 3) {
      const host = domains[Math.floor(Math.random() * domains.length)];
      try {
        const testUrl = `https://${host}/show/fyfilter.html`;
        const res = req(testUrl, { timeout: 3000 });
        if (res && res.code === 200) {
          log(`域名验证成功: ${host}`);
          return `https://${host}`;
        }
      } catch (e) {
        log(`域名 ${host} 连接失败: ${e.message}`);
      }
    }
    return 'https://lkvod.com';
  })(),
  url: '/show/fyfilter.html',
  
  
##预处理：
// 可在预处理中添加Cookie验证
const checkAuth = () => {
  if(!rule.headers.Cookie){
    const auth = verifyLogin(rule.host);
    rule.headers.Cookie = auth.cookie;
  }
}
lazy广告过滤代码：
// 在play_parse中添加广告过滤
const filterAds = (url) => {
  return url.replace(/\/ad\/\d+\//,'/');
}

##广告过滤写法：
  proxy_rule: `js:
  let url = input.url;
  let m3u8 = fixAdM3u8Ai(url);
  input = [200,'application/vnd.apple.mpegurl',m3u8]
  `
##代理广告过滤示例1：
proxy_rule: $js.toString(() => {      
        let data=fetch(input.url,{headers:rule.headers})       
        // let m3u8=data.replace('URI="','URI="http://194.147.100.39')
        let m3u8=data.replace('URI="',`URI="${rule.host}`)        
        input = [200, 'application/vnd.apple.mpegurl', m3u8]
    }),

##代理广告过滤示例2：
proxy_rule: `js:
const { fixAdM3u8Ai } = require('./m3u8-filter'); // 假设函数保存在外部文件
let url = input.url;
let headers = input.headers; // 获取请求头
let m3u8 = fixAdM3u8AiPro(url, headers);
input = [200, 'application/vnd.apple.mpegurl', m3u8];
`
##代理示例1
proxy_rule: $js.toString(() => {
        // console.log("tup====="+input);
        if (input) {
            let data1 = request(input.url);
            let key = CryptoJS.enc.Utf8.parse("46cc793c53dc451b");
            let img
            if (/pK0H/.test(data1)) {
                var decrypt = CryptoJS.AES.decrypt(data1, key, {
                    mode: CryptoJS.mode.ECB,
                    padding: CryptoJS.pad.Pkcs7
                });
                img = decrypt.toString(CryptoJS.enc.Utf8);
            } else {
                var decrypt = CryptoJS.AES.decrypt(data1, key, {
                    mode: CryptoJS.mode.ECB,
                    padding: CryptoJS.pad.NoPadding
                });
                img = decrypt.toString(CryptoJS.enc.Utf8);

            }
            let type=img.match(/.*image\/([^;]+);/)[1];
            input = [200, `image/${type}`, img, null, 1];
        }

    }),
          
##筛选简述:
###1.动漫巴士为例：
{https://dm84.top/show-1--hits-奇幻--2024-2.html
等于：
https://dm84.top/show-fyclass--fyfilter-fypage.html}
'hits-奇幻--2024'='{{fl.by}}-{{fl.class}}--{{fl.year}}'='fyfilter'
###2.参考源内看看屋示例：
部分代码：{
	title:'看看屋',
	模板:'mxpro',
	host:'https://www.kkw1200.com',
	// url:'/vodshow/fyclass--------fypage---.html',//不带筛选的url写法
	url:'/vodshow/fyfilter.html',//带筛选的url写法
	filterable:1,//是否启用分类筛选,
	filter_url:'{{fl.cateId}}-{{fl.area}}-{{fl.by}}-{{fl.class}}-{{fl.lang}}-{{fl.letter}}---fypage---{{fl.year}}',
	//filter_url:'{{fl.类型}}-{{fl.地区}}-{{fl.排序}}-{{fl.剧情}}-{{fl.语言}}-{{fl.字母}}---fypage---{{fl.年份}}',//filter_url第二种写法，对应地filter里的key也要写成中文
	//filter_url截取链接：https://www.kkw1200.com/vodshow/8-大陆-hits-喜剧-国语-A---2---2022.html
	filter: {
		"1":[{"key":"cateId","name":"类型","value":[{"n":"全部","v":"1"},{"n":"动作片","v":"6"},{"n":"喜剧片","v":"7"},{"n":"爱情片","v":"8"},{"n":"科幻片","v":"9"},{"n":"恐怖片","v":"10"},{"n":"战争片","v":"11"},{"n":"剧情片","v":"12"},{"n":"动画片","v":"34"},{"n":"歌舞片","v":"20"},{"n":"历史片","v":"21"},{"n":"谍战片","v":"22"}]},{"key":"class","name":"剧情","value":[{"n":"全部","v":""},{"n":"喜剧","v":"喜剧"},{"n":"爱情","v":"爱情"},{"n":"恐怖","v":"恐怖"},{"n":"动作","v":"动作"},{"n":"科幻","v":"科幻"},{"n":"剧情","v":"剧情"},{"n":"战争","v":"战争"},{"n":"警匪","v":"警匪"},{"n":"犯罪","v":"犯罪"},{"n":"动画","v":"动画"},{"n":"奇幻","v":"奇幻"},{"n":"武侠","v":"武侠"},{"n":"冒险","v":"冒险"},{"n":"枪战","v":"枪战"},{"n":"恐怖","v":"恐怖"},{"n":"悬疑","v":"悬疑"},{"n":"惊悚","v":"惊悚"},{"n":"经典","v":"经典"},{"n":"青春","v":"青春"},{"n":"文艺","v":"文艺"},{"n":"微电影","v":"微电影"},{"n":"古装","v":"古装"},{"n":"历史","v":"历史"},{"n":"运动","v":"运动"},{"n":"农村","v":"农村"},{"n":"儿童","v":"儿童"},{"n":"网络电影","v":"网络电影"}]},{"key":"area","name":"地区","value":[{"n":"全部","v":""},{"n":"大陆","v":"大陆"},{"n":"香港","v":"香港"},{"n":"台湾","v":"台湾"},{"n":"美国","v":"美国"},{"n":"法国","v":"法国"},{"n":"英国","v":"英国"},{"n":"日本","v":"日本"},{"n":"韩国","v":"韩国"},{"n":"德国","v":"德国"},{"n":"泰国","v":"泰国"},{"n":"印度","v":"印度"},{"n":"意大利","v":"意大利"},{"n":"西班牙","v":"西班牙"},{"n":"加拿大","v":"加拿大"},{"n":"其他","v":"其他"}]},{"key":"lang","name":"语言","value":[{"n":"全部","v":""},{"n":"国语","v":"国语"},{"n":"英语","v":"英语"},{"n":"粤语","v":"粤语"},{"n":"闽南语","v":"闽南语"},{"n":"韩语","v":"韩语"},{"n":"日语","v":"日语"},{"n":"法语","v":"法语"},{"n":"德语","v":"德语"},{"n":"其它","v":"其它"}]},{"key":"year","name":"年份","value":[{"n":"全部","v":""},{"n":"2023","v":"2023"},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"}]},{"key":"letter","name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"}]},{"key":"by","name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}],
		"2":[{"key":"cateId","name":"类型","value":[{"n":"全部","v":"2"},{"n":"国产剧","v":"13"},{"n":"香港剧","v":"14"},{"n":"欧美剧","v":"15"},{"n":"日本剧","v":"16"},{"n":"海外剧","v":"23"},{"n":"台湾剧","v":"24"},{"n":"韩国剧","v":"25"},{"n":"泰国剧","v":"26"},{"n":"灾难片","v":"27"},{"n":"奇幻片","v":"28"},{"n":"冒险片","v":"29"},{"n":"犯罪片","v":"30"},{"n":"惊悚片","v":"31"},{"n":"传记片","v":"32"},{"n":"悬疑片","v":"33"}]},{"key":"class","name":"剧情","value":[{"n":"全部","v":""},{"n":"古装","v":"古装"},{"n":"战争","v":"战争"},{"n":"青春偶像","v":"青春偶像"},{"n":"喜剧","v":"喜剧"},{"n":"家庭","v":"家庭"},{"n":"犯罪","v":"犯罪"},{"n":"动作","v":"动作"},{"n":"奇幻","v":"奇幻"},{"n":"剧情","v":"剧情"},{"n":"历史","v":"历史"},{"n":"经典","v":"经典"},{"n":"乡村","v":"乡村"},{"n":"情景","v":"情景"},{"n":"商战","v":"商战"},{"n":"网剧","v":"网剧"},{"n":"其他","v":"其他"}]},{"key":"area","name":"地区","value":[{"n":"全部","v":""},{"n":"内地","v":"内地"},{"n":"韩国","v":"韩国"},{"n":"香港","v":"香港"},{"n":"台湾","v":"台湾"},{"n":"日本","v":"日本"},{"n":"美国","v":"美国"},{"n":"泰国","v":"泰国"},{"n":"英国","v":"英国"},{"n":"新加坡","v":"新加坡"},{"n":"其他","v":"其他"}]},{"key":"lang","name":"语言","value":[{"n":"全部","v":""},{"n":"国语","v":"国语"},{"n":"英语","v":"英语"},{"n":"粤语","v":"粤语"},{"n":"闽南语","v":"闽南语"},{"n":"韩语","v":"韩语"},{"n":"日语","v":"日语"},{"n":"其它","v":"其它"}]},{"key":"year","name":"年份","value":[{"n":"全部","v":""},{"n":"2023","v":"2023"},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"},{"n":"2009","v":"2009"},{"n":"2008","v":"2008"},{"n":"2006","v":"2006"},{"n":"2005","v":"2005"},{"n":"2004","v":"2004"}]},{"key":"letter","name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"}]},{"key":"by","name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}],
		"3":[{"key":"class","name":"剧情","value":[{"n":"全部","v":""},{"n":"选秀","v":"选秀"},{"n":"情感","v":"情感"},{"n":"访谈","v":"访谈"},{"n":"播报","v":"播报"},{"n":"旅游","v":"旅游"},{"n":"音乐","v":"音乐"},{"n":"美食","v":"美食"},{"n":"纪实","v":"纪实"},{"n":"曲艺","v":"曲艺"},{"n":"生活","v":"生活"},{"n":"游戏互动","v":"游戏互动"},{"n":"财经","v":"财经"},{"n":"求职","v":"求职"}]},{"key":"area","name":"地区","value":[{"n":"全部","v":""},{"n":"内地","v":"内地"},{"n":"港台","v":"港台"},{"n":"日韩","v":"日韩"},{"n":"欧美","v":"欧美"}]},{"key":"lang","name":"语言","value":[{"n":"全部","v":""},{"n":"国语","v":"国语"},{"n":"英语","v":"英语"},{"n":"粤语","v":"粤语"},{"n":"闽南语","v":"闽南语"},{"n":"韩语","v":"韩语"},{"n":"日语","v":"日语"},{"n":"其它","v":"其它"}]},{"key":"year","name":"年份","value":[{"n":"全部","v":""},{"n":"2023","v":"2023"},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"},{"n":"2009","v":"2009"},{"n":"2008","v":"2008"},{"n":"2007","v":"2007"},{"n":"2006","v":"2006"},{"n":"2005","v":"2005"},{"n":"2004","v":"2004"}]},{"key":"letter","name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"}]},{"key":"by","name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}],
		"4":[{"key":"class","name":"剧情","value":[{"n":"全部","v":""},{"n":"情感","v":"情感"},{"n":"科幻","v":"科幻"},{"n":"热血","v":"热血"},{"n":"推理","v":"推理"},{"n":"搞笑","v":"搞笑"},{"n":"冒险","v":"冒险"},{"n":"萝莉","v":"萝莉"},{"n":"校园","v":"校园"},{"n":"动作","v":"动作"},{"n":"机战","v":"机战"},{"n":"运动","v":"运动"},{"n":"战争","v":"战争"},{"n":"少年","v":"少年"},{"n":"少女","v":"少女"},{"n":"社会","v":"社会"},{"n":"原创","v":"原创"},{"n":"亲子","v":"亲子"},{"n":"益智","v":"益智"},{"n":"励志","v":"励志"},{"n":"其他","v":"其他"}]},{"key":"area","name":"地区","value":[{"n":"全部","v":""},{"n":"国产","v":"国产"},{"n":"日本","v":"日本"},{"n":"欧美","v":"欧美"},{"n":"其他","v":"其他"}]},{"key":"lang","name":"语言","value":[{"n":"全部","v":""},{"n":"国语","v":"国语"},{"n":"英语","v":"英语"},{"n":"粤语","v":"粤语"},{"n":"闽南语","v":"闽南语"},{"n":"韩语","v":"韩语"},{"n":"日语","v":"日语"},{"n":"其它","v":"其它"}]},{"key":"year","name":"年份","value":[{"n":"全部","v":""},{"n":"2023","v":"2023"},{"n":"2022","v":"2022"},{"n":"2021","v":"2021"},{"n":"2020","v":"2020"},{"n":"2019","v":"2019"},{"n":"2018","v":"2018"},{"n":"2017","v":"2017"},{"n":"2016","v":"2016"},{"n":"2015","v":"2015"},{"n":"2014","v":"2014"},{"n":"2013","v":"2013"},{"n":"2012","v":"2012"},{"n":"2011","v":"2011"},{"n":"2010","v":"2010"},{"n":"2009","v":"2009"},{"n":"2008","v":"2008"},{"n":"2007","v":"2007"},{"n":"2006","v":"2006"},{"n":"2005","v":"2005"},{"n":"2004","v":"2004"}]},{"key":"letter","name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"}]},{"key":"by","name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}],
		"5":[{"key":"letter","name":"字母","value":[{"n":"全部","v":""},{"n":"A","v":"A"},{"n":"B","v":"B"},{"n":"C","v":"C"},{"n":"D","v":"D"},{"n":"E","v":"E"},{"n":"F","v":"F"},{"n":"G","v":"G"},{"n":"H","v":"H"},{"n":"I","v":"I"},{"n":"J","v":"J"},{"n":"K","v":"K"},{"n":"L","v":"L"},{"n":"M","v":"M"},{"n":"N","v":"N"},{"n":"O","v":"O"},{"n":"P","v":"P"},{"n":"Q","v":"Q"},{"n":"R","v":"R"},{"n":"S","v":"S"},{"n":"T","v":"T"},{"n":"U","v":"U"},{"n":"V","v":"V"},{"n":"W","v":"W"},{"n":"X","v":"X"},{"n":"Y","v":"Y"},{"n":"Z","v":"Z"}]},{"key":"by","name":"排序","value":[{"n":"时间","v":"time"},{"n":"人气","v":"hits"},{"n":"评分","v":"score"}]}]
	},
	filter_def:{
		1:{cateId:'1'},
		2:{cateId:'2'},
		3:{cateId:'3'},
		4:{cateId:'4'},
		5:{cateId:'5'}
	},

###系统安全验证写法：
示例1：
function verifyLogin(url) {
    let cnt = 0;
    let cookie = '';
    let r = Math.random();
    let yzm_url = getHome(url) + '/index.php/verify/index.html';
    log(`验证码链接:${yzm_url}`);
    let submit_url = getHome(url) + '/index.php/ajax/verify_check';
    log(`post登录链接:${submit_url}`);
    while (cnt < OCR_RETRY) {
        try {
            let {cookie, html} = reqCookie(yzm_url + '?r=' + r, {toBase64: true});
            let code = OcrApi.classification(html);
            log(`第${cnt + 1}次验证码识别结果:${code}`);
            html = post(submit_url, {
                headers: {Cookie: cookie},
                body: 'type=show&verify=' + code,
            });
            html = JSON.parse(html);
            
            if (html.code === 1) {
                log(`第${cnt + 1}次验证码提交成功`);
                log(cookie);
                return cookie // 需要返回cookie
            } else if (html.code !== 1 && cnt + 1 >= OCR_RETRY) {
                cookie = ''; // 需要清空返回cookie
            }
        } catch (e) {
            log(`第${cnt + 1}次验证码提交失败:${e.message}`);
            if (cnt + 1 >= OCR_RETRY) {
                cookie = '';
            }
        }
        cnt += 1
    }
    return cookie
}

globalThis.verifyLogin = verifyLogin;

示例2(动态切换验证类型show或search)：
function verifyLogin(url, verifyType = 'show') {
    let cnt = 0;
    let cookie = '';
    let r = Math.random();
    let yzm_url = getHome(url) + '/index.php/verify/index.html';
    log(`验证码链接:${yzm_url}`);
    let submit_url = getHome(url) + '/index.php/ajax/verify_check';
    log(`post登录链接:${submit_url}`);
    while (cnt < OCR_RETRY) {
        try {
            let {cookie, html} = reqCookie(yzm_url + '?r=' + r, {toBase64: true});
            let code = OcrApi.classification(html);
            log(`第${cnt + 1}次验证码识别结果:${code}`);
                        
            let requestBody = `type=${verifyType}&verify=${code}`; 
            
            html = post(submit_url, {
                headers: {Cookie: cookie},
                body: requestBody, 
            });
            html = JSON.parse(html);
            
            if (html.code === 1) {
                log(`第${cnt + 1}次验证码提交成功`);
                log(cookie);
                return cookie;
            } else if (html.code !== 1 && cnt + 1 >= OCR_RETRY) {
                cookie = '';
            }
        } catch (e) {
            log(`第${cnt + 1}次验证码提交失败:${e.message}`);
            if (cnt + 1 >= OCR_RETRY) {
                cookie = '';
            }
        }
        cnt += 1
    }
    return cookie;
}
globalThis.verifyLogin = verifyLogin;

###自定义免嗅探:
示例1:
lazy: $js.toString(() => {
    let html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);
    let url = html.url;
    if (html.encrypt == '1') {
      url = unescape(url)
    } else if (html.encrypt == '2') {
      url = unescape(base64Decode(url))
    }
    if (/\.m3u8|\.mp4/.test(url)) {
      input = {
        jx: 0,
        url: url,
        parse: 0
      }
    } else {
      input
    };
    const video = document.getElementById('myVideo');
    video.addEventListener('canplay', function () {
      video.currentTime = 10;
    });
}),	
示例2:
lazy : `js:
            if(/\\.(m3u8|mp4)/.test(input)){
                input = {parse:0,url:input}
            }else{
                if(rule.parse_url.startsWith('json:')){
                    let purl = rule.parse_url.replace('json:','')+input;
                    let html = request(purl);
                    input = {parse:0,url:JSON.parse(html).url}
                }else{
                    input= rule.parse_url+input; 
                }
            `,
示例3:
lazy: $js.toString(() => {
        input = jxx(input);
    }),

示例4：
lazy: $js.toString(() => {
    let ep = 1;
    let match = input.match(/ep=(.*?)$/);
    if (match) {
      ep = match[1];
    }
    //log(ep)
    let html = request(input);
    let jsonA = jsp.pdfh(html, "#__NEXT_DATA__&&Html");
    let data = JSON.parse(jsonA).props.pageProps.videoDetail.videoepisode.data;
    //log(data)
    let item = data.find(function(it) {
      return it.episode == ep;
    });
    let realUrl = item ? item.url : (data.length > 0 ? data[0].url : undefined);
    //log(realUrl)
    input = {
      url: realUrl,
      parse: 0
    };
  }),
  
示例5：
lazy: $js.toString(() => {
        let html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]);
        let url = html.url;
        if (html.encrypt == '1') {
            url = unescape(url)
        } else if (html.encrypt == '2') {
            url = unescape(base64Decode(url))
        }
        if (/\.m3u8|\.mp4/.test(url)) {
            input = {
                jx: 0,
                url: url,
                parse: 0
            }
        } else {
            input
        }
    }),  
                  
###推荐&一级&二级&搜索写法:
示例1：
推荐: $js.toString(() => {
        let bdata = vodlist(0, 1);
        console.log(bdata);
        bdata.forEach(it => {
            d.push({
                url: it.vod_id,
                title: it.vod_name,
                img: it.vod_pic,
                desc: it.vod_remarks
            });
        });
        setResult(d);
    }),
    一级: $js.toString(() => {
        let bdata = vodlist(input, MY_PAGE);
        console.log(bdata);
        bdata.forEach(it => {
            d.push({
                url: it.vod_id,
                title: it.vod_name,
                img: it.vod_pic,
                desc: it.vod_remarks
            });
        });
        setResult(d);
    }),
    二级: $js.toString(() => {
        console.log("调试信息2" + input);
        let data = vodids(input);
        //console.log(data);
        VOD = (data);
    }),
    搜索: $js.toString(() => {
        let ddata = seach(input);
        ddata.forEach(it => {
            d.push({
                url: it.vod_id,
                title: it.vod_name,
                img: it.vod_pic,
                desc: it.vod_remarks
            });
        });
        setResult(d);
    }),

示例2:
    一级二:'.ewave-vodlist&&li;.lazyload&&title;.lazyload&&data-original;.pic-text&&Text;a&&href',
	一级: $js.toString(() => {
         let cookie = getItem(RULE_CK, '');
        //log('储存的cookie:' + cookie);        
        let ret = request(MY_URL, {
            headers: {
                Referer: encodeUrl(MY_URL),
                Cookie: cookie,
            }
        });
        if (/系统安全验证/.test(ret)) {
            //log(ret);
            cookie = verifyLogin(MY_URL);
            if (cookie) {
                log(`本次成功过验证,cookie:${cookie}`);
                setItem(RULE_CK, cookie);
            } else {
                log(`本次验证失败,cookie:${cookie}`);
            }
            ret = request(MY_URL, {
                headers: {
                    Referer: encodeUrl(MY_URL),
                    Cookie: cookie,
                }
            });
        }
//log(ret);
        let d = [];
        let p = rule.一级二.split(';');
        let arr = pdfa(ret, p[0]);//列表
        arr.forEach(it => {
            d.push({
                title: pdfh(it, p[1]),//标题
                pic_url: pdfh(it, p[2]),//图片
                desc: pdfh(it, p[3]),//描述
                url: pdfh(it, p[4]),//链接
                
            });

        });
        setResult(d);
    }),
********
搜索: `js:
    let cookie = getItem(RULE_CK,'');
    // let cookie = '';
    log('储存的cookie:'+cookie);
    let hhtml=request(input,{withHeaders:true,headers:{Cookie:cookie}});
    let json = JSON.parse(hhtml);
    let html = json.body;
    let setCk = Object.keys(json).find(it=>it.toLowerCase()==='set-cookie');
    cookie = setCk ? json[setCk] : cookie;
    // 3个set-Cookie
    if (Array.isArray(cookie)) {
        cookie = cookie.join(';');
    }
    cookie = cookie.split(';')[0];
    log('set-cookie:'+cookie);
    let code='';
    if(/erphp-search-captcha/.test(html)){
        code = jsp.pdfh(html,'.erphp-search-captcha--button&&Text');
        if(code.includes('=')){
            let a = code.replace('=','').replace(/ /g,'');
            code = eval(a);
            log('回答验证码:'+a+' 答案:'+code);
        }
        let key = jsp.pdfh(html,'.erphp-search-captcha&&input&&name');
        let body = key+'='+code;
        post(input,{body:body,headers:{Cookie:cookie}});
        setItem(RULE_CK,cookie);
        html = getHtml(input);
    }
    // log(html);
    VODS = [];
    let lis=pdfa(html,'.search_list&&ul&&li');
    log(lis.length);
    lis.forEach(function(it){
        VODS.push({
            vod_id: pd(it,'a&&href',input),
			vod_name: pdfh(it,'h3.dytit&&Text'),
			vod_pic: pd(it,'img.lazy&&data-original',input),
			vod_remarks: pdfh(html,'.jidi&&Text')
        });
    
    });
    `,   

示例3：
一级: 'json:list;vod_name;vod_pic;vod_remarks;vod_id',     
二级: `js:
let kdata = JSON.parse(request(input)).data;
VOD = kdata;
VOD.type_name = kdata.vod_class
`,
搜索: 'json:list;name;pic;;id',

示例4：
搜索: $js.toString(() => {
        let html = post(input.split('?')[0], {body: input.split('?')[1]});
        let items = pdfa(html, 'rss&&item');
        // log(items);
        let d = [];
        items.forEach(it => {
            it = it.replace(/title|link|author|pubdate|description/g, 'p');
            let url = pdfh(it, 'p:eq(1)&&Text');
            d.push({
                title: pdfh(it, 'p&&Text'),
                url: url,
                desc: pdfh(it, 'p:eq(3)&&Text'),
                content: pdfh(it, 'p:eq(2)&&Text'),
                pic_url: "",
            });
        });
        setResult(d);
    }),
    
示例5：
推荐: $js.toString(() => {
    let html = fetch(input);
    let j = pdfh(html, "#__NEXT_DATA__&&Html");
    let json = JSON.parse(j);
    let list = json.props.pageProps;
    //let list = json.props.pageProps.recommendSectionData.list;
    list = JP.JSONPath("$.['columnSectionData'][*]['popular_list']['video_info'][*]", list);
    //log(JSON.stringify(list,null,2));
    //log(list)
    VODS = list.map(function(it) {
      it.vod_pic = it.cover;
      it.vod_remarks = it.tag;
      it.vod_name = it.name;
      it.vod_id = HOST + "/detail/" + it.id;
      return it
    });
  }),
  一级: $js.toString(() => {
    let html = fetch(input);
    let j = pdfh(html, "#__NEXT_DATA__&&Html");
    let json = JSON.parse(j);
    let list = json.props.pageProps.mediaData.data;
    //log(list)
    VODS = list.map(function(it) {
      it.vod_pic = it.cover;
      it.vod_remarks = it.tag;
      it.vod_name = it.name;
      it.vod_id = HOST + "/detail/" + it.id;
      return it
    });
  }),
  二级: {
    "title": "h1&&Text",
    "img": "img&&src",
    "desc": "video-desc-item&&Text;.video-desc-type-mb&&Text",
    "content": ".video-introduce&&p&&Text",
    "tabs": ".btn-play",
    lists: $js.toString(() => {
      LISTS = [];
      let j = pdfh(html, "#__NEXT_DATA__&&Html");
      let list = pdfa(html, ".play-list&&a");
      if (list.length == 0) {
        LISTS.push(["1$" + MY_URL.replace("detail", "player")])
      } else {
        list = list.map(it => pdfh(it, 'Text') + "$" + HOST + pdfh(it, 'a&&href'));
        LISTS.push(list)
      }
      //log(LISTS)
    }),
  },
  搜索: $js.toString(() => {
    let html = fetch(input);
    let j = pdfh(html, "#__NEXT_DATA__&&Html");
    let json = JSON.parse(j);
    let list = json.props.pageProps.searchMovieList.data;
    //log(list)
    VODS = list.map(function(it) {
      it.vod_pic = it.pic;
      it.vod_remarks = it.resolution;
      it.vod_name = it.name;
      it.vod_id = HOST + "/detail/" + it.id;
      return it
    });
  }), 
  
示例6：
一级:`js:
        var d = [];
        pdfh = jsp.pdfh;
        pdfa = jsp.pdfa;
        pd = jsp.pd;
        var html = request(input, {
            withHeaders: true
        });
        let json = JSON.parse(html);
        let setCk = Object.keys(json).find(it => it.toLowerCase() === "set-cookie");
        let cookie = setCk ? json[setCk].split(";")[0] : "";
        fetch_params.headers.Cookie = cookie;
        html = JSON.parse(html).body;
        if (/检测中/.test(html)) {
            html = request(input + "?btwaf" + html.match(/btwaf(.*?)\"/)[1], fetch_params)
        }
        let list = pdfa(html, "ul.stui-vodlist&&li");
        list.forEach(it => {
            d.push({
                title: pdfh(it, "a&&title"),
                desc: pdfh(it, ".pic-text&&Text"),
                pic_url: pd(it, ".lazyload&&data-original"),
                url: pd(it, "a&&href")
            })
        });
        setResult(d)
    `,
    二级:`js:
        pdfh = jsp.pdfh;
        pdfa = jsp.pdfa;
        pd = jsp.pd;
        VOD = {};
        var html = request(input, {
            withHeaders: true
        });
        let json = JSON.parse(html);
        let setCk = Object.keys(json).find((it) => it.toLowerCase() === "set-cookie");
        let cookie = setCk ? json[setCk].split(";")[0] : "";
        fetch_params.headers.Cookie = cookie;
        html = JSON.parse(html).body;
        if (/检测中/.test(html)) {
            html = request(input + "?btwaf" + html.match(/btwaf(.*?)\"/)[1], fetch_params)
        }
        VOD.vod_name = pdfh(html, ".stui-content__detail&&h1--span&&Text");
        VOD.type_name = pdfh(html, ".data--span:eq(0)&&Text");
        VOD.vod_pic = pd(html, ".stui-content__thumb&&img&&data-original");
        VOD.vod_remarks = pdfh(html, ".stui-content__thumb&&pic-text&&Text");
        VOD.vod_actor = pdfh(html, ".data--span:eq(1)&&Text");
        VOD.vod_director = pdfh(html, ".data--span:eq(2)&&Text");
        VOD.vod_content = pdfh(html, ".desc.hidden-xs--a&&Text");
        let playFrom = [];
        let vod_tab_list = [];
        let tabs = pdfa(html, "body .stui-pannel__head.bottom-line");
        tabs.forEach((it) => {
            playFrom.push(pdfh(it, "h3&&Text"))
        });
        for (let i = 0; i < playFrom.length; i++) {
            let p1 = ".stui-content__playlist:eq(#id)&&li".replaceAll("#id", i);
            let new_vod_list = [];
            let vodList = [];
            try {
                vodList = pdfa(html, p1)
            } catch (e) {}
            for (let i = 0; i < vodList.length; i++) {
                let it = vodList[i];
                new_vod_list.push(pdfh(it, "body&&Text").trim() + "$" + pd(it, "a&&href"))
            }
            let vlist = new_vod_list.join("#");
            vod_tab_list.push(vlist)
        }
        VOD.vod_play_from = playFrom.join("$$$");
        VOD.vod_play_url = vod_tab_list.join("$$$");
    `,
    搜索:`js:
        var d = [];
        pdfh = jsp.pdfh;
        pdfa = jsp.pdfa;
        pd = jsp.pd;
        var html = request(input, {
            withHeaders: true
        });
        let json = JSON.parse(html);
        let setCk = Object.keys(json).find(it => it.toLowerCase() === "set-cookie");
        let cookie = setCk ? json[setCk].split(";")[0] : "";
        fetch_params.headers.Cookie = cookie;
        html = JSON.parse(html).body;
        if (/检测中/.test(html)) {
            html = request(input + "?btwaf" + html.match(/btwaf(.*?)\"/)[1], fetch_params)
        }
        let list = pdfa(html, ".stui-vodlist__media&&li");
        list.forEach(it => {
            d.push({
                title: pdfh(it, "a&&title"),
                desc: pdfh(it, ".pic-text&&Text"),
                pic_url: pd(it, ".lazyload&&data-original"),
                url: pd(it, "a&&href")
            })
        });
        setResult(d)
    `,

示例7：
推荐／一级/搜索: $js.toString(() => {
        let html = fetch(input);
        let list = pdfa(html, ".public-list-box");
        VODS = list.map(x => {
            return {
                vod_name: pdfh(x, ".thumb-txt&&Text"),
                vod_pic: pdfh(x, ".lazy&&data-src"),
                vod_remarks: pdfh(x, ".public-list-prb&&Text"),
                vod_content: pdfh(x, ".thumb-blurb&&Text"),
                vod_id: pdfh(x, "a&&href")
            }
        });
    }),
    
###zyfun抓取采集源方式代码(点击zy写源工具中'首页'抓取)
var rule = {
    推荐: $js.toString(() => {
        let url = 'https://blog.ilol.top/p/zqgwes.html';
        let html = request(url);
        let tlist = pdfa(html, '.post-content&&h2');
        log(tlist)
        let alist = pdfa(html, '.post-content&&a:gt(0)');
        log(alist);

        VODS = [];

        for (let i in tlist) {
            VODS.push({
                name: pdfh(tlist[i], 'Text'),
                url: pdfh(alist[i], 'a&&href'),
            })
        }
        log(JSON.stringify(VODS))

    })
} 

###筛选分类获取：
filter获取方法:`
    let value = [];
    $('ul').eq(2).find('li').each(function() {
      // console.log($(this).text());
      let n = $(this).text().trim();
      value.push({
      'n': n, 'v': n
      });
    });
    // 电影执行:
    let data = {'movie': [{'key': 'tag', 'name': '标签', 'value': value}]};
    console.log(JSON.stringify(data));
    
    //剧集执行:
    let data = {'tv': [{'key': 'tag', 'name': '标签', 'value': value}]};
    console.log(JSON.stringify(data));
    `,       

图片代理解密示例1：    
proxy_rule: $js.toString(() => {
        //log(input);
        // 测试:https://www.wakatool.com/base64img
        if (input) {
            let t1 = new Date().getTime();
            let _type = input.url.split('.').slice(-1)[0];
            let data = request(input.url, {toBase64: true});
            //log(data);
            let t2 = new Date().getTime();
            log(`网络请求获取图片耗时:${t2 - t1}ms`);
            // log(`当前线程:${java.lang.Thread.currentThread().getName()}`);

            let key = CryptoJS.enc.Utf8.parse("f5d965df75336270");
            let iv = CryptoJS.enc.Utf8.parse("97b60394abc2fbe1");
            let encrypted = CryptoJS.AES.decrypt({
                ciphertext: CryptoJS.enc.Base64.parse(data)
            }, key, {
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            }).toString(CryptoJS.enc.Base64);
            // .toString(CryptoJS.enc.Utf8).toTypedArray(CryptoJS.enc.Utf8); //直接转参数3可用的字节流方法
            let img_base64 = 'data:image/' + _type + ';base64,' + encrypted;
            let t3 = new Date().getTime();
            log(`已获取图片${input.url}解密耗时:${t3 - t2}ms`);
            // // input = [200, 'text/plain', img_base64];
            // input = [302, 'text/html', '', {Location:'https://www.baidu.com'}];
            input = [200, 'image/' + _type, img_base64, null, 1];
            // input = [200, 'text/plain', data];
        }
    }),
    预处理: $js.toString(() => {
        rule.cate_exclude = '';
    }),    

图片代理解密示例2：
proxy_rule: $js.toString(() => {
        log(input.url);
        if (input.url.includes('https://pic.eqiykt.cn')) {
            let content = request(input.url, {withHeaders: true, toBase64: true});
            log(content);
            input = [200, 'text/plain', content];
        } else {
            input = [403, 'text/plain', 'forbidden']
        }
    }),    